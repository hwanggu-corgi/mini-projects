{"version":3,"sources":["components/ChatInput/index.js","components/ChatBox/index.js","components/Navigation/index.js","components/Users/index.js","screens/ChatScreen.js","screens/LoginScreen.js","screens/SignupScreen.js","App.js","reportWebVitals.js","index.js"],"names":["colorGrey","Div","styled","div","Textarea","textarea","ChatTextArea","props","value","onChange","Button","button","SubmitButton","onClick","disabled","icon","faPaperPlane","POST_MUTATION","gql","ChatInput","useState","texts","setText","useMutation","variables","onCompleted","_","onError","e","alert","post","target","trim","isValid","ChatBox","split","map","textline","username","localStorage","getItem","postedBy","Section","section","Header","header","ChatBoxList","chats","chat","id","ChatBoxSection","scrollToBottom","scrollToBottomRef","current","scrollIntoView","behavior","React","createRef","this","ref","sectionRef","Component","colorOrange","LogoutButton","history","useHistory","clear","push","MobileNavigation","toggled","setToggled","Nav","nav","UserList","userList","users","user","User","isOwner","Ul","ul","Span","span","Li","li","faUser","ChatInputSection","QUERY","NEW_CHAT_SUBSCRIPTION","ChatScreen","useQuery","data","subscribeToMore","document","updateQuery","prev","subscriptionData","newChat","find","Object","assign","colorWhite","H1","h1","Form","form","Input","input","ButtonPrimary","ButtonSecondary","NavLink","LOGIN_MUTATION","LoginScreen","setUsername","password","setPassword","login","setItem","token","type","placeholder","preventDefault","to","SIGNUP_MUTATION","SignupScreen","password2","setPassword2","signup","App","className","path","component","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","httpLink","createHttpLink","uri","authLink","setContext","headers","authorization","wsLink","WebSocketLink","options","reconnect","connectionParams","authToken","link","query","getMainDefinition","kind","operation","concat","client","ApolloClient","cache","InMemoryCache","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4c43720a.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { useMutation, gql } from '@apollo/client';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPaperPlane } from '@fortawesome/free-solid-svg-icons';\n\nconst colorGrey = \"#EEEEEE\";\n\nconst Div = styled.div`\n    background-color: ${colorGrey};\n    padding: 1em;\n    border-radius: 5em;\n    display:flex;\n    flex-grow: 1;\n`;\n\nconst Textarea = styled.textarea`\n    border: none;\n    resize: none;\n    width: 100%;\n    background-color: ${colorGrey};\n    text-decoration: none;\n    padding: 1em;\n    overflow-y: scroll;\n\n    &:focus {\n        outline: none;\n    }\n`;\n\nfunction ChatTextArea(props) {\n    return (\n        <Div>\n            <Textarea value={props.value} onChange={props.onChange}/>\n        </Div>\n    );\n}\n\nconst colorOrange = \"#FFA341\";\n\nconst Button = styled.button`\n    border: none;\n    background-color: white;\n    font-size: 1.5em;\n    text-decoration: none;\n    color: ${colorOrange};\n    padding: 0.5em;\n    margin: 0.5em;\n    cursor: pointer;\n\n    &:disabled {\n        opacity: 0.8;\n    }\n`;\n\nfunction SubmitButton(props) {\n    return (\n        <Button onClick={props.onClick} disabled={props.disabled}>\n            <FontAwesomeIcon icon={faPaperPlane}/>\n        </Button>\n    );\n}\n\nconst POST_MUTATION = gql`\n    mutation PostMutation(\n        $texts: String!\n    ) {\n        post(texts: $texts) {\n            id\n            postedBy {\n            id,\n                username\n            }\n            texts\n        }\n    }\n`;\n\nexport function ChatInput(props) {\n    const [texts, setText] = useState(\"\");\n\n    const isValid = (texts) => {\n        if (!texts || texts.trim() === \"\") {\n            return false;\n        }\n\n        return true;\n    }\n\n    const [post] = useMutation(POST_MUTATION, {\n        variables: {\n          texts: texts,\n        },\n        onCompleted: (_) => {\n            setText(\"\");\n        },\n        onError(e) {\n            alert(\"Error occured\");\n        }\n    });\n\n    return (\n        <>\n            <ChatTextArea value={texts} onChange={ e => setText(e.target.value)}/>\n            <SubmitButton onClick={post} disabled={!isValid(texts)}/>\n        </>\n    );\n}\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\n\nconst colorOrange = \"#FFA341\";\n\nfunction ChatBox(props) {\n    const texts = props.texts.split(\"\\n\").map(textline => <p>{textline}</p>);\n    const username = localStorage.getItem(\"USERNAME\");\n    const Div = styled.div`\n        display: flex;\n        justify-content: ${props.postedBy.username === username ? \"flex-end\" : \"initial\"};\n    `;\n\n    const Section = styled.section`\n        margin: 0;\n        background-color: ${colorOrange};\n        padding: 1em;\n        border-radius: 1.5em;\n        max-width: 12em;\n        font-size: 0.8em;\n        white-space: pre-wrap;\n    `;\n\n    const Header = styled.header`\n        font-size: 0.7em;\n        padding: 0.5em 1em;\n    `;\n\n    return (\n        <Div>\n            <article>\n                <Header>\n                    <span>{props.postedBy.username}</span>\n                </Header>\n                <Section>\n                    {texts}\n                </Section>\n            </article>\n        </Div>\n    );\n}\n\n\nfunction ChatBoxList(props) {\n    return props.chats.map(chat => <ChatBox key={chat.id} {...chat}/>)\n}\n\nexport class ChatBoxSection extends Component {\n    constructor(props) {\n        super(props);\n        this.scrollToBottomRef = React.createRef();\n    }\n\n    scrollToBottom = () => {\n        this.scrollToBottomRef.current.scrollIntoView({ behavior: 'auto' })\n    }\n\n    componentDidMount () {\n        this.scrollToBottom()\n    }\n\n    componentDidUpdate () {\n        this.scrollToBottom()\n    }\n\n    render() {\n        const Section = styled.section`\n            flex-grow: 1;\n            overflow-y: scroll;\n            padding: 1em;\n        `;\n\n        return (\n            <Section ref={this.sectionRef}>\n                <ChatBoxList chats={this.props.chats}/>\n                <div ref={this.scrollToBottomRef}/>\n            </Section>\n        );\n    }\n}","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport styled from 'styled-components';\n\nconst colorOrange = \"#FFA341\";\nconst colorWhite = \"#FFFFFF\";\n\n\nfunction LogoutButton() {\n    const history = useHistory();\n    const logout = () => {\n        localStorage.clear();\n        history.push(\"/\");\n    }\n\n    const Button = styled.button`\n        border: none;\n        background-color: ${colorWhite};\n        font-size: 0.8em;\n        text-decoration: none;\n        color: ${colorOrange};\n        padding: 0.5em 1em;\n        margin: 0.5em;\n        cursor: pointer;\n        border-radius: 5em;\n\n        &:disabled {\n            opacity: 0.8;\n        }\n    `;\n\n    return (\n        <Button onClick={logout}>\n            Logout\n        </Button>\n    );\n}\n\nexport function MobileNavigation() {\n    const [toggled, setToggled] = useState(false);\n    const Button = styled.button`\n        background-color: transparent;\n        border: none;\n        padding: 0.5em;\n        cursor: pointer;\n    `;\n\n    const Nav = styled.nav`\n        padding: 0.39em 0.75em;\n        background-color: ${colorOrange};\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n    `;\n\n    const Div = styled.div`\n        background-color: white;\n        width: 1.75em;\n        height: 0.12em;\n        margin-bottom: 0.4em;\n\n        &:last-child {\n            margin: 0;\n        }\n    `;\n\n    return (\n        <Nav>\n            <Button onClick={_ => setToggled(!toggled)}>\n                <Div></Div>\n                <Div></Div>\n                <Div></Div>\n            </Button>\n            <LogoutButton/>\n        </Nav>\n    );\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\n\nconst colorGrey = \"#EEEEEE\";\nconst colorOrange = \"#FFA341\";\nconst colorWhite = \"#FFFFFF\";\nconst mobileNavigationHeight = \"3.30em\";\n\nexport function UserList(props) {\n    const username = localStorage.getItem(\"USERNAME\");\n    const userList = props.users.map(user => <User key={user.id} {...user} isOwner={username === user.username}/>);\n    const Ul = styled.ul`\n        list-style: none;\n        padding: 0;\n        margin: 0;\n        height: calc(100vh - ${mobileNavigationHeight});\n        width: 15em;\n        box-shadow: 2px 0px ${colorGrey};\n    `;\n    return (\n        <Ul>\n            {userList}\n        </Ul>\n    );\n}\n\nfunction User(props) {\n    const Div = styled.div`\n        color: ${colorWhite};\n        background-color: ${colorOrange};\n        padding: 0.8em;\n        display: inline-block;\n        border-radius: 50%;\n        margin-right: 1em;\n\n        div {\n            width: 1.25em;\n            height: 1.25em;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n        }\n    `;\n\n    const Span = styled.span`\n        font-size: 0.8em;\n    `;\n\n    const Li = styled.li`\n        display: flex;\n        align-items: center;\n        padding: 0.5em 1em;\n    `;\n\n    return (\n        <Li>\n            <Div>\n                <div>\n                    <FontAwesomeIcon icon={faUser}/>\n                </div>\n            </Div>\n            <Span>{props.username} {props.isOwner ? \"(Me)\" : \"\"}</Span>\n        </Li>\n    );\n}\n","import styled from 'styled-components';\nimport React from 'react';\nimport { useQuery, gql } from '@apollo/client';\nimport { ChatInput } from '../components/ChatInput';\nimport { ChatBoxSection } from '../components/ChatBox';\nimport { MobileNavigation } from '../components/Navigation';\nimport { UserList } from '../components/Users';\n\nconst mobileNavigationHeight = \"3.30em\";\n\nconst Div = styled.div`\n    display: flex;\n`;\n\nconst Section = styled.section`\n    height: calc(100vh - ${mobileNavigationHeight});\n    display: flex;\n    flex-direction: column;\n    flex-grow: 1;\n`;\n\nconst ChatInputSection = styled.section`\n    display: flex;\n    padding: 1em;\n`;\n\nconst QUERY = gql`\n  query {\n    users {\n      id,\n      username\n    },\n    chats {\n      id,\n      postedBy {\n        username\n      },\n      texts\n    }\n  }\n`;\n\nconst NEW_CHAT_SUBSCRIPTION = gql`\n  subscription {\n    newChat {\n      id\n      texts\n      postedBy {\n        id\n        username\n      }\n    }\n  }\n`;\n\nfunction ChatScreen() {\n    const { data, subscribeToMore } = useQuery(QUERY);\n    const chats = data && data.chats ? data.chats : [];\n    const users = data && data.users ? data.users : [];\n\n    subscribeToMore({\n      document: NEW_CHAT_SUBSCRIPTION,\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev;\n        const newChat = subscriptionData.data.newChat;\n        const exists = prev.chats.find(\n          ({ id }) => id === newChat.id\n        );\n        if (exists) return prev;\n\n        return Object.assign({}, prev, {\n          chats: [...prev.chats, newChat],\n          users: prev.users\n        });\n      }\n    });\n\n    return (\n      <>\n        <MobileNavigation/>\n        <Div>\n            <UserList users={users}/>\n            <Section>\n            <ChatBoxSection chats={chats}/>\n            <ChatInputSection>\n                <ChatInput/>\n            </ChatInputSection>\n            </Section>\n        </Div>\n      </>\n    );\n  }\n\n  export default ChatScreen;\n","import styled from 'styled-components';\nimport { NavLink, useHistory } from 'react-router-dom';\nimport React, { useState } from 'react';\nimport { useMutation, gql } from '@apollo/client';\n\n\nconst colorYellow = \"#FFE24F\";\nconst colorBrown = \"#9A4D31\";\nconst colorOrange = \"#FFA341\";\nconst colorWhite = \"#FFFFFF\";\n\nconst Section = styled.section`\n  width: 100vw;\n  height: 100vh;\n  background-color: ${colorOrange};\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Div = styled.div`\n  color: ${colorWhite};\n  width: 15em;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst H1 = styled.h1`\n  text-align: center;\n`;\n\nconst Form = styled.form`\n  display: flex;\n  flex-direction: column;\n\n  & > * {\n    display: block;\n  }\n\n  & > * {\n    margin-bottom: 0.5em;\n  }\n\n  & > input:last-of-type {\n    margin-bottom: 1.5em;\n  }\n\n  & > *:last-child {\n    margin: 0;\n  }\n`;\n\nconst Input = styled.input`\n  padding: 1em;\n  border: none;\n  background-color: white;\n  border-radius: 5em;\n  text-align: center;\n\n  &:placeholder {\n      text-align: center;\n  }\n`;\n\nconst ButtonPrimary = styled.button`\n  padding: 1em;\n  border: none;\n  border-radius: 5em;\n  text-align: center;\n  cursor: pointer;\n  background-color: ${colorBrown};\n  color: ${colorWhite};\n  font-size: 0.8em;\n`;\n\nconst ButtonSecondary = styled(NavLink)`\n  padding: 1em;\n  border: none;\n  border-radius: 5em;\n  text-align: center;\n  cursor: pointer;\n  background-color: ${colorYellow};\n  font-size: 0.8em;\n  text-decoration: none;\n  color: black;\n`;\n\nconst LOGIN_MUTATION = gql`\n  mutation LoginMutation(\n    $username: String!\n    $password: String!\n  ) {\n    login(\n      username: $username\n      password: $password\n    ) {\n      token\n      user {\n        username\n      }\n    }\n  }\n`;\n\nfunction LoginScreen() {\n  const history = useHistory();\n\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const [login] = useMutation(LOGIN_MUTATION, {\n    variables: {\n      username: username,\n      password: password,\n    },\n    onCompleted: ({ login }) => {\n      localStorage.setItem(\"AUTH_TOKEN\", login.token);\n      localStorage.setItem(\"USERNAME\", login.user.username);\n      history.push('/chat');\n    }\n  });\n\n  const isValid = (username, password) => {\n    if (!username || !password) {\n      return false;\n    }\n\n    if (username.trim() === \"\") {\n      return false;\n    }\n\n    if (password.trim() === \"\") {\n      return false;\n    }\n\n    return true;\n  }\n\n  const submit = (e) => {\n    e.preventDefault();\n    login();\n  }\n\n  return (\n    <Section>\n      <Div>\n        <H1>Chat Application</H1>\n        <Form>\n            <Input type=\"text\" placeholder=\"Username\" value={username} onChange={e => setUsername(e.target.value)}/>\n            <Input type=\"password\" placeholder=\"Password\" value={password} onChange={e => setPassword(e.target.value)}/>\n            <ButtonPrimary type=\"submit\" onClick={submit} disabled={!isValid(username, password)}>\n              Login\n            </ButtonPrimary>\n            <ButtonSecondary to=\"/signup\">\n              Signup\n            </ButtonSecondary>\n        </Form>\n      </Div>\n    </Section>\n  );\n}\n\nexport default LoginScreen;\n","import styled from 'styled-components';\nimport { NavLink, useHistory } from 'react-router-dom';\nimport React, { useState } from 'react';\nimport { useMutation, gql } from '@apollo/client';\n\nconst colorYellow = \"#FFE24F\";\nconst colorBrown = \"#9A4D31\";\nconst colorOrange = \"#FFA341\";\nconst colorWhite = \"#FFFFFF\";\n\nconst Section = styled.section`\n  width: 100vw;\n  height: 100vh;\n  background-color: ${colorOrange};\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Div = styled.div`\n  color: ${colorWhite};\n  width: 15em;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst H1 = styled.h1`\n  text-align: center;\n`;\n\nconst Form = styled.form`\n  display: flex;\n  flex-direction: column;\n\n  & > * {\n    display: block;\n  }\n\n  & > * {\n    margin-bottom: 0.5em;\n  }\n\n  & > input:last-of-type {\n    margin-bottom: 1.5em;\n  }\n\n  & > *:last-child {\n    margin: 0;\n  }\n`;\n\nconst Input = styled.input`\n  padding: 1em;\n  border: none;\n  background-color: white;\n  border-radius: 5em;\n  text-align: center;\n\n  &:placeholder {\n      text-align: center;\n  }\n`;\n\nconst ButtonPrimary = styled.button`\n  padding: 1em;\n  border: none;\n  border-radius: 5em;\n  text-align: center;\n  cursor: pointer;\n  background-color: ${colorBrown};\n  color: ${colorWhite};\n  font-size: 0.8em;\n\n  &:disabled,\n  &[disabled]{\n    opacity: 0.6;\n  }\n`;\n\nconst ButtonSecondary = styled(NavLink)`\n  padding: 1em;\n  border: none;\n  border-radius: 5em;\n  text-align: center;\n  cursor: pointer;\n  background-color: ${colorYellow};\n  font-size: 0.8em;\n  text-decoration: none;\n  color: black;\n`;\n\nconst SIGNUP_MUTATION = gql`\n  mutation SignupMutation(\n    $username: String!\n    $password: String!\n  ) {\n    signup(\n      username: $username\n      password: $password\n    ) {\n      token\n      user {\n        username\n      }\n    }\n  }\n`;\n\nfunction SignupScreen(props) {\n  const history = useHistory();\n\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [password2, setPassword2] = useState(\"\");\n\n  const [signup] = useMutation(SIGNUP_MUTATION, {\n    variables: {\n      username: username,\n      password: password,\n    },\n    onCompleted: ({ signup }) => {\n      localStorage.setItem(\"AUTH_TOKEN\", signup.token);\n      localStorage.setItem(\"USERNAME\", signup.user.username);\n      history.push('/chat');\n    }\n  });\n\n  const isValid = (username, password, password2) => {\n    if (!username || !password || !password2) {\n      return false;\n    }\n\n    if (username.trim() === \"\") {\n      return false;\n    }\n\n    if (password.trim() === \"\") {\n      return false;\n    }\n\n    if (password2.trim() === \"\") {\n      return false;\n    }\n\n    if (password.value !== password2.value) {\n      return false;\n    }\n\n    return true;\n  }\n\n  const submit = (e) => {\n    e.preventDefault();\n    signup();\n  }\n\n  return (\n    <Section>\n      <Div>\n        <H1>Chat Application</H1>\n        <Form>\n            <Input type=\"text\" placeholder=\"Username\" value={username} onChange={e => setUsername(e.target.value)}/>\n            <Input type=\"password\" placeholder=\"Password\" value={password} onChange={e => setPassword(e.target.value)}/>\n            <Input type=\"password\" placeholder=\"Password Confirm\" value={password2} onChange={e => setPassword2(e.target.value)}/>\n            <ButtonPrimary type=\"submit\" onClick={submit} disabled={!isValid(username, password, password2)}>\n              Signup\n            </ButtonPrimary>\n            <ButtonSecondary to=\"/\">\n              Back\n            </ButtonSecondary>\n        </Form>\n      </Div>\n    </Section>\n  );\n}\n\nexport default SignupScreen;\n","import './App.css';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport ChatScreen from './screens/ChatScreen';\nimport LoginScreen from './screens/LoginScreen';\nimport SignupScreen from './screens/SignupScreen';\n\nfunction App() {\n  return (\n    <HashRouter>\n        <main className=\"App\">\n          <Switch>\n              <Route path=\"/chat\" component={ChatScreen}/>\n              <Route exact path=\"/signup\" component={SignupScreen}/>\n              <Route exact path=\"/\" component={LoginScreen}/>\n          </Switch>\n        </main>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { setContext } from '@apollo/client/link/context';\nimport { WebSocketLink } from '@apollo/client/link/ws';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport {\n  ApolloProvider,\n  ApolloClient,\n  createHttpLink,\n  InMemoryCache,\n  split\n} from '@apollo/client';\n\n\n\nconst httpLink = createHttpLink({\n  uri: 'https://chat-application-hyungmogu.herokuapp.com/'\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem(\"AUTH_TOKEN\");\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : ''\n    }\n  };\n});\n\nconst wsLink = new WebSocketLink({\n  uri: `wss://chat-application-hyungmogu.herokuapp.com/graphql`,\n  options: {\n    reconnect: true,\n    connectionParams: {\n      authToken: localStorage.getItem(\"AUTH_TOKEN\")\n    }\n  }\n});\n\nconst link = split(\n  ({ query }) => {\n    const { kind, operation } = getMainDefinition(query);\n    return (\n      kind === 'OperationDefinition' &&\n      operation === 'subscription'\n    );\n  },\n  wsLink,\n  authLink.concat(httpLink)\n);\n\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache()\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}