{"version":3,"sources":["components/ChatInput/index.js","components/ChatBox/index.js","components/Navigation/index.js","components/Users/index.js","screens/ChatScreen.js","constants.js","screens/LoginScreen.js","screens/SignupScreen.js","App.js","reportWebVitals.js","index.js"],"names":["colorGrey","Div","styled","div","Textarea","textarea","ChatTextArea","props","value","onChange","Button","button","SubmitButton","onClick","disabled","icon","faPaperPlane","POST_MUTATION","gql","ChatInput","useState","texts","setText","useMutation","variables","onCompleted","_","onError","e","alert","post","target","trim","isValid","ChatBox","split","map","textline","Section","section","Header","header","postedBy","username","ChatBoxList","chats","chat","id","MobileNavigation","toggled","setToggled","Nav","nav","UserList","userList","users","user","User","Ul","ul","Span","span","Li","li","faUser","ChatBoxSection","ChatInputSection","QUERY","ChatScreen","data","useQuery","AUTH_TOKEN","colorWhite","H1","h1","Form","form","Input","input","ButtonPrimary","ButtonSecondary","NavLink","LOGIN_MUTATION","LoginScreen","history","useHistory","setUsername","password","setPassword","login","localStorage","setItem","token","push","type","placeholder","preventDefault","to","SIGNUP_MUTATION","SignupScreen","password2","setPassword2","signup","App","className","path","component","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","httpLink","createHttpLink","uri","authLink","setContext","headers","getItem","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.677d62ae.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { useMutation, gql } from '@apollo/client';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPaperPlane } from '@fortawesome/free-solid-svg-icons';\n\nconst colorGrey = \"#EEEEEE\";\n\nconst Div = styled.div`\n    background-color: ${colorGrey};\n    padding: 1em;\n    border-radius: 5em;\n    display:flex;\n    flex-grow: 1;\n`;\n\nconst Textarea = styled.textarea`\n    border: none;\n    resize: none;\n    width: 100%;\n    background-color: ${colorGrey};\n    text-decoration: none;\n    padding: 1em;\n    overflow-y: scroll;\n\n    &:focus {\n        outline: none;\n    }\n`;\n\nfunction ChatTextArea(props) {\n    return (\n        <Div>\n            <Textarea value={props.value} onChange={props.onChange}/>\n        </Div>\n    );\n}\n\nconst colorOrange = \"#FFA341\";\n\nconst Button = styled.button`\n    border: none;\n    background-color: white;\n    font-size: 1.5em;\n    text-decoration: none;\n    color: ${colorOrange};\n    padding: 0.5em;\n    margin: 0.5em;\n    cursor: pointer;\n\n    &:disabled {\n        opacity: 0.8;\n    }\n`;\n\nfunction SubmitButton(props) {\n    return (\n        <Button onClick={props.onClick} disabled={props.disabled}>\n            <FontAwesomeIcon icon={faPaperPlane}/>\n        </Button>\n    );\n}\n\nconst POST_MUTATION = gql`\n    mutation PostMutation(\n        $texts: String!\n    ) {\n        post(texts: $texts) {\n            id\n            postedBy {\n            id,\n                username\n            }\n            texts\n        }\n    }\n`;\n\nexport function ChatInput(props) {\n    const [texts, setText] = useState(\"\");\n\n    const isValid = (texts) => {\n        if (!texts || texts.trim() === \"\") {\n            return false;\n        }\n\n        return true;\n    }\n\n    const [post] = useMutation(POST_MUTATION, {\n        variables: {\n          texts: texts,\n        },\n        onCompleted: (_) => {\n            setText(\"\");\n        },\n        onError(e) {\n            alert(\"Error occured\");\n        }\n    });\n\n    return (\n        <>\n            <ChatTextArea value={texts} onChange={ e => setText(e.target.value)}/>\n            <SubmitButton onClick={post} disabled={!isValid(texts)}/>\n        </>\n    );\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst colorOrange = \"#FFA341\";\n\nfunction ChatBox(props) {\n    const texts = props.texts.split(\"\\n\").map(textline => <p>{textline}</p>);\n    const Section = styled.section`\n        margin: 0;\n        background-color: ${colorOrange};\n        padding: 1em;\n        border-radius: 1.5em;\n        max-width: 12em;\n        font-size: 0.8em;\n        white-space: pre-wrap;\n    `;\n\n    const Header = styled.header`\n        font-size: 0.7em;\n        padding: 0.5em 1em;\n    `;\n\n    return (\n        <article>\n            <Header>\n                <span>{props.postedBy.username}</span>\n            </Header>\n            <Section>\n                {texts}\n            </Section>\n        </article>\n    );\n}\n\n\nexport function ChatBoxList(props) {\n    return props.chats.map(chat => <ChatBox key={chat.id} {...chat}/>)\n}","import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nconst colorOrange = \"#FFA341\";\n\nexport function MobileNavigation() {\n    const [toggled, setToggled] = useState(false);\n    const Button = styled.button`\n        background-color: transparent;\n        border: none;\n        padding: 0.5em;\n        cursor: pointer;\n    `;\n\n    const Nav = styled.nav`\n        padding: 0.75em;\n        background-color: ${colorOrange};\n    `;\n\n    const Div = styled.div`\n        background-color: white;\n        width: 1.75em;\n        height: 0.12em;\n        margin-bottom: 0.4em;\n\n        &:last-child {\n            margin: 0;\n        }\n    `;\n\n    return (\n        <Nav>\n            <Button onClick={_ => setToggled(!toggled)}>\n                <Div></Div>\n                <Div></Div>\n                <Div></Div>\n            </Button>\n        </Nav>\n    );\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\n\nconst colorGrey = \"#EEEEEE\";\nconst colorOrange = \"#FFA341\";\nconst colorWhite = \"#FFFFFF\";\nconst mobileNavigationHeight = \"3.30em\";\n\nexport function UserList(props) {\n    const userList = props.users.map(user => <User key={user.id} {...user}/>);\n    const Ul = styled.ul`\n        list-style: none;\n        padding: 0;\n        margin: 0;\n        height: calc(100vh - ${mobileNavigationHeight});\n        width: 15em;\n        box-shadow: 2px 0px ${colorGrey};\n    `;\n    return (\n        <Ul>\n            {userList}\n        </Ul>\n    );\n}\n\nfunction User(props) {\n    const Div = styled.div`\n        color: ${colorWhite};\n        background-color: ${colorOrange};\n        padding: 0.8em;\n        display: inline-block;\n        border-radius: 50%;\n        margin-right: 1em;\n\n        div {\n            width: 1.25em;\n            height: 1.25em;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n        }\n    `;\n\n    const Span = styled.span`\n        font-size: 0.8em;\n    `;\n\n    const Li = styled.li`\n        display: flex;\n        align-items: center;\n        padding: 0.5em 1em;\n    `;\n\n    return (\n        <Li>\n            <Div>\n                <div>\n                    <FontAwesomeIcon icon={faUser}/>\n                </div>\n            </Div>\n            <Span>{props.username}</Span>\n        </Li>\n    );\n}\n","import styled from 'styled-components';\nimport React from 'react';\nimport { useQuery, gql } from '@apollo/client';\nimport { ChatInput } from '../components/ChatInput';\nimport { ChatBoxList } from '../components/ChatBox';\nimport { MobileNavigation } from '../components/Navigation';\nimport { UserList } from '../components/Users';\n\nconst mobileNavigationHeight = \"3.30em\";\n\nconst Div = styled.div`\n    display: flex;\n`;\n\nconst Section = styled.section`\n    height: calc(100vh - ${mobileNavigationHeight});\n    display: flex;\n    flex-direction: column;\n    flex-grow: 1;\n`;\n\nconst ChatBoxSection = styled.section`\n    flex-grow: 1;\n    overflow-y: scroll;\n    padding: 1em;\n`;\n\nconst ChatInputSection = styled.section`\n    display: flex;\n    padding: 1em;\n`;\n\nconst QUERY = gql`\n  {\n    users {\n      id,\n      username\n    },\n    chats {\n      id,\n      postedBy {\n        username\n      },\n      texts\n    }\n  }\n`;\n\nfunction ChatScreen() {\n    const { data } = useQuery(QUERY);\n    const chats = data && data.chats ? data.chats : [];\n    const users = data && data.users ? data.users : [];\n\n    return (\n      <>\n        <MobileNavigation/>\n        <Div>\n            <UserList users={users}/>\n            <Section>\n            <ChatBoxSection>\n                <ChatBoxList chats={chats}/>\n            </ChatBoxSection>\n            <ChatInputSection>\n                <ChatInput/>\n            </ChatInputSection>\n            </Section>\n        </Div>\n      </>\n    );\n  }\n\n  export default ChatScreen;\n","export const AUTH_TOKEN = '12345';","import styled from 'styled-components';\nimport { NavLink, useHistory } from 'react-router-dom';\nimport React, { useState } from 'react';\nimport { useMutation, gql } from '@apollo/client';\nimport { AUTH_TOKEN } from '../constants';\n\nconst colorYellow = \"#FFE24F\";\nconst colorBrown = \"#9A4D31\";\nconst colorOrange = \"#FFA341\";\nconst colorWhite = \"#FFFFFF\";\n\nconst Section = styled.section`\n  width: 100vw;\n  height: 100vh;\n  background-color: ${colorOrange};\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Div = styled.div`\n  color: ${colorWhite};\n  width: 15em;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst H1 = styled.h1`\n  text-align: center;\n`;\n\nconst Form = styled.form`\n  display: flex;\n  flex-direction: column;\n\n  & > * {\n    display: block;\n  }\n\n  & > * {\n    margin-bottom: 0.5em;\n  }\n\n  & > input:last-of-type {\n    margin-bottom: 1.5em;\n  }\n\n  & > *:last-child {\n    margin: 0;\n  }\n`;\n\nconst Input = styled.input`\n  padding: 1em;\n  border: none;\n  background-color: white;\n  border-radius: 5em;\n  text-align: center;\n\n  &:placeholder {\n      text-align: center;\n  }\n`;\n\nconst ButtonPrimary = styled.button`\n  padding: 1em;\n  border: none;\n  border-radius: 5em;\n  text-align: center;\n  cursor: pointer;\n  background-color: ${colorBrown};\n  color: ${colorWhite};\n  font-size: 0.8em;\n`;\n\nconst ButtonSecondary = styled(NavLink)`\n  padding: 1em;\n  border: none;\n  border-radius: 5em;\n  text-align: center;\n  cursor: pointer;\n  background-color: ${colorYellow};\n  font-size: 0.8em;\n  text-decoration: none;\n  color: black;\n`;\n\nconst LOGIN_MUTATION = gql`\n  mutation LoginMutation(\n    $username: String!\n    $password: String!\n  ) {\n    login(\n      username: $username\n      password: $password\n    ) {\n      token\n      user {\n        username\n      }\n    }\n  }\n`;\n\nfunction LoginScreen() {\n\n  const history = useHistory();\n\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const [login] = useMutation(LOGIN_MUTATION, {\n    variables: {\n      username: username,\n      password: password,\n    },\n    onCompleted: ({ login }) => {\n      localStorage.setItem(AUTH_TOKEN, login.token);\n      history.push('/chat');\n    }\n  });\n\n  const isValid = (username, password) => {\n    if (!username || !password) {\n      return false;\n    }\n\n    if (username.trim() === \"\") {\n      return false;\n    }\n\n    if (password.trim() === \"\") {\n      return false;\n    }\n\n    return true;\n  }\n\n  const submit = (e) => {\n    e.preventDefault();\n    login();\n  }\n\n  return (\n    <Section>\n      <Div>\n        <H1>Chat Application</H1>\n        <Form>\n            <Input type=\"text\" placeholder=\"Username\" value={username} onChange={e => setUsername(e.target.value)}/>\n            <Input type=\"password\" placeholder=\"Password\" value={password} onChange={e => setPassword(e.target.value)}/>\n            <ButtonPrimary type=\"submit\" onClick={submit} disabled={!isValid(username, password)}>\n              Login\n            </ButtonPrimary>\n            <ButtonSecondary to=\"/signup\">\n              Signup\n            </ButtonSecondary>\n        </Form>\n      </Div>\n    </Section>\n  );\n}\n\nexport default LoginScreen;\n","import styled from 'styled-components';\nimport { NavLink, useHistory } from 'react-router-dom';\nimport React, { useState } from 'react';\nimport { useMutation, gql } from '@apollo/client';\nimport { AUTH_TOKEN } from '../constants';\n\nconst colorYellow = \"#FFE24F\";\nconst colorBrown = \"#9A4D31\";\nconst colorOrange = \"#FFA341\";\nconst colorWhite = \"#FFFFFF\";\n\nconst Section = styled.section`\n  width: 100vw;\n  height: 100vh;\n  background-color: ${colorOrange};\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Div = styled.div`\n  color: ${colorWhite};\n  width: 15em;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst H1 = styled.h1`\n  text-align: center;\n`;\n\nconst Form = styled.form`\n  display: flex;\n  flex-direction: column;\n\n  & > * {\n    display: block;\n  }\n\n  & > * {\n    margin-bottom: 0.5em;\n  }\n\n  & > input:last-of-type {\n    margin-bottom: 1.5em;\n  }\n\n  & > *:last-child {\n    margin: 0;\n  }\n`;\n\nconst Input = styled.input`\n  padding: 1em;\n  border: none;\n  background-color: white;\n  border-radius: 5em;\n  text-align: center;\n\n  &:placeholder {\n      text-align: center;\n  }\n`;\n\nconst ButtonPrimary = styled.button`\n  padding: 1em;\n  border: none;\n  border-radius: 5em;\n  text-align: center;\n  cursor: pointer;\n  background-color: ${colorBrown};\n  color: ${colorWhite};\n  font-size: 0.8em;\n\n  &:disabled,\n  &[disabled]{\n    opacity: 0.6;\n  }\n`;\n\nconst ButtonSecondary = styled(NavLink)`\n  padding: 1em;\n  border: none;\n  border-radius: 5em;\n  text-align: center;\n  cursor: pointer;\n  background-color: ${colorYellow};\n  font-size: 0.8em;\n  text-decoration: none;\n  color: black;\n`;\n\nconst SIGNUP_MUTATION = gql`\n  mutation SignupMutation(\n    $username: String!\n    $password: String!\n  ) {\n    signup(\n      username: $username\n      password: $password\n    ) {\n      token\n      user {\n        username\n      }\n    }\n  }\n`;\n\nfunction SignupScreen(props) {\n  const history = useHistory();\n\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [password2, setPassword2] = useState(\"\");\n\n  const [signup] = useMutation(SIGNUP_MUTATION, {\n    variables: {\n      username: username,\n      password: password,\n    },\n    onCompleted: ({ signup }) => {\n      localStorage.setItem(AUTH_TOKEN, signup.token);\n      history.push('/chat');\n    }\n  });\n\n  const isValid = (username, password, password2) => {\n    if (!username || !password || !password2) {\n      return false;\n    }\n\n    if (username.trim() === \"\") {\n      return false;\n    }\n\n    if (password.trim() === \"\") {\n      return false;\n    }\n\n    if (password2.trim() === \"\") {\n      return false;\n    }\n\n    if (password.value !== password2.value) {\n      return false;\n    }\n\n    return true;\n  }\n\n  const submit = (e) => {\n    e.preventDefault();\n    signup();\n  }\n\n  return (\n    <Section>\n      <Div>\n        <H1>Chat Application</H1>\n        <Form>\n            <Input type=\"text\" placeholder=\"Username\" value={username} onChange={e => setUsername(e.target.value)}/>\n            <Input type=\"password\" placeholder=\"Password\" value={password} onChange={e => setPassword(e.target.value)}/>\n            <Input type=\"password\" placeholder=\"Password Confirm\" value={password2} onChange={e => setPassword2(e.target.value)}/>\n            <ButtonPrimary type=\"submit\" onClick={submit} disabled={!isValid(username, password, password2)}>\n              Signup\n            </ButtonPrimary>\n            <ButtonSecondary to=\"/\">\n              Back\n            </ButtonSecondary>\n        </Form>\n      </Div>\n    </Section>\n  );\n}\n\nexport default SignupScreen;\n","import './App.css';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport ChatScreen from './screens/ChatScreen';\nimport LoginScreen from './screens/LoginScreen';\nimport SignupScreen from './screens/SignupScreen';\n\nfunction App() {\n  return (\n    <HashRouter>\n        <main className=\"App\">\n          <Switch>\n              <Route path=\"/chat\" component={ChatScreen}/>\n              <Route exact path=\"/signup\" component={SignupScreen}/>\n              <Route exact path=\"/\" component={LoginScreen}/>\n          </Switch>\n        </main>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { setContext } from '@apollo/client/link/context';\nimport { AUTH_TOKEN } from './constants';\n\nimport {\n  ApolloProvider,\n  ApolloClient,\n  createHttpLink,\n  InMemoryCache\n} from '@apollo/client';\n\nconst httpLink = createHttpLink({\n  uri: 'https://chat-application-hyungmogu.herokuapp.com/'\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem(AUTH_TOKEN);\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : ''\n    }\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache()\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}