{"version":3,"sources":["components/Buttons/index.js","components/ChatTextArea/index.js","components/ChatBox/index.js","components/Navigation/index.js","components/Users/index.js","screens/ChatScreen.js","constants.js","screens/LoginScreen.js","screens/SignupScreen.js","App.js","reportWebVitals.js","index.js"],"names":["SubmitButton","Button","styled","button","icon","faPaperPlane","colorGrey","ChatTextArea","Div","div","Textarea","textarea","ChatBox","props","texts","split","map","textline","Section","section","Header","header","postedBy","username","ChatBoxList","chats","chat","id","MobileNavigation","useState","toggled","setToggled","Nav","nav","onClick","_","UserList","userList","users","user","User","Ul","ul","Span","span","Li","li","faUser","ChatBoxSection","ChatInputSection","QUERY","gql","ChatScreen","data","useQuery","AUTH_TOKEN","colorWhite","H1","h1","Form","form","Input","input","ButtonPrimary","ButtonSecondary","NavLink","LOGIN_MUTATION","LoginScreen","history","useHistory","setUsername","password","setPassword","useMutation","variables","onCompleted","login","localStorage","setItem","token","push","type","placeholder","value","onChange","e","target","preventDefault","disabled","trim","isValid","to","SIGNUP_MUTATION","SignupScreen","password2","setPassword2","signup","App","className","path","component","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","httpLink","createHttpLink","uri","client","ApolloClient","link","cache","InMemoryCache","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.85a6b20d.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPaperPlane } from '@fortawesome/free-solid-svg-icons';\n\nconst colorOrange = \"#FFA341\";\n\nexport function SubmitButton() {\n    const Button = styled.button`\n        border: none;\n        background-color: white;\n        font-size: 1.5em;\n        text-decoration: none;\n        color: ${colorOrange};\n        padding: 0.5em;\n        margin: 1em;\n        cursor: pointer;\n    `;\n    return (\n        <Button>\n            <FontAwesomeIcon icon={faPaperPlane}/>\n        </Button>\n    );\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst colorGrey = \"#EEEEEE\";\n\nexport function ChatTextArea() {\n    const Div = styled.div`\n        background-color: ${colorGrey};\n        padding: 1em;\n        border-radius: 5em;\n        display:flex;\n    `;\n\n    const Textarea = styled.textarea`\n        border: none;\n        resize: none;\n        width: 100%;\n        background-color: ${colorGrey};\n        text-decoration: none;\n        padding: 1em;\n        overflow-y: scroll;\n\n        &:focus {\n            outline: none;\n        }\n    `;\n    return (\n        <Div>\n            <Textarea/>\n        </Div>\n    );\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst colorOrange = \"#FFA341\";\n\nexport function ChatBox(props) {\n    const texts = props.texts.split(\"\\n\").map(textline => <p>{textline}</p>);\n    const Section = styled.section`\n        margin: 0;\n        background-color: ${colorOrange};\n        padding: 1em;\n        border-radius: 1.5em;\n        max-width: 12em;\n        font-size: 0.8em;\n        white-space: pre-wrap;\n    `;\n\n    const Header = styled.header`\n        font-size: 0.7em;\n        padding: 0.5em 1em;\n    `;\n\n    return (\n        <article>\n            <Header>\n                <span>{props.postedBy.username}</span>\n            </Header>\n            <Section>\n                {texts}\n            </Section>\n        </article>\n    );\n}\n\n\nexport function ChatBoxList(props) {\n    return props.chats.map(chat => <ChatBox key={chat.id} {...chat}/>)\n}","import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nconst colorOrange = \"#FFA341\";\n\nexport function MobileNavigation() {\n    const [toggled, setToggled] = useState(false);\n    const Button = styled.button`\n        background-color: transparent;\n        border: none;\n        padding: 0.5em;\n        cursor: pointer;\n    `;\n\n    const Nav = styled.nav`\n        padding: 0.75em;\n        background-color: ${colorOrange};\n    `;\n\n    const Div = styled.div`\n        background-color: white;\n        width: 1.75em;\n        height: 0.12em;\n        margin-bottom: 0.4em;\n\n        &:last-child {\n            margin: 0;\n        }\n    `;\n\n    return (\n        <Nav>\n            <Button onClick={_ => setToggled(!toggled)}>\n                <Div></Div>\n                <Div></Div>\n                <Div></Div>\n            </Button>\n        </Nav>\n    );\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\n\nconst colorGrey = \"#EEEEEE\";\nconst colorOrange = \"#FFA341\";\nconst colorWhite = \"#FFFFFF\";\n\nexport function UserList(props) {\n    const userList = props.users.map(user => <User key={user.id} {...user}/>);\n    const Ul = styled.ul`\n        list-style: none;\n        padding: 0;\n        margin: 0;\n        height: 100vh;\n        width: 15em;\n        box-shadow: 2px 0px ${colorGrey};\n    `;\n    return (\n        <Ul>\n            {userList}\n        </Ul>\n    );\n}\n\nfunction User(props) {\n    const Div = styled.div`\n        color: ${colorWhite};\n        background-color: ${colorOrange};\n        padding: 0.8em;\n        display: inline-block;\n        border-radius: 50%;\n        margin-right: 1em;\n\n        div {\n            width: 1.25em;\n            height: 1.25em;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n        }\n    `;\n\n    const Span = styled.span`\n        font-size: 0.8em;\n    `;\n\n    const Li = styled.li`\n        display: flex;\n        align-items: center;\n        padding: 0.5em 1em;\n    `;\n\n    return (\n        <Li>\n            <Div>\n                <div>\n                    <FontAwesomeIcon icon={faUser}/>\n                </div>\n            </Div>\n            <Span>{props.username}</Span>\n        </Li>\n    );\n}\n","import styled from 'styled-components';\nimport { useQuery, gql } from '@apollo/client';\nimport { SubmitButton } from '../components/Buttons';\nimport { ChatTextArea } from '../components/ChatTextArea';\nimport { ChatBoxList } from '../components/ChatBox';\nimport { MobileNavigation } from '../components/Navigation';\nimport { UserList } from '../components/Users';\n\n\nconst Div = styled.div`\n    display: flex;\n`;\n\nconst Section = styled.section`\n    padding: 1em;\n    display: flex;\n    flex-direction: column;\n`;\n\nconst ChatBoxSection = styled.section`\n\n`;\n\nconst ChatInputSection = styled.section`\n    display: flex;\n`;\n\nconst QUERY = gql`\n  {\n    users {\n      id,\n      username\n    },\n    chats {\n      id,\n      postedBy {\n        username\n      },\n      texts\n    }\n  }\n`;\n\nfunction ChatScreen() {\n    const { data } = useQuery(QUERY);\n    const chats = data && data.chats ? data.chats : [];\n    const users = data && data.users ? data.users : [];\n\n    return (\n      <>\n        <MobileNavigation/>\n        <Div>\n          <UserList users={users}/>\n          <Section>\n            <ChatBoxSection>\n              <ChatBoxList chats={chats}/>\n            </ChatBoxSection>\n            <ChatInputSection>\n              <ChatTextArea/>\n              <SubmitButton/>\n            </ChatInputSection>\n          </Section>\n        </Div>\n      </>\n    );\n  }\n\n  export default ChatScreen;\n","export const AUTH_TOKEN = '12345';","import styled from 'styled-components';\nimport { NavLink, useHistory } from 'react-router-dom';\nimport React, { useState } from 'react';\nimport { useMutation, gql } from '@apollo/client';\nimport { AUTH_TOKEN } from '../constants';\n\nconst colorYellow = \"#FFE24F\";\nconst colorBrown = \"#9A4D31\";\nconst colorOrange = \"#FFA341\";\nconst colorWhite = \"#FFFFFF\";\n\nconst Section = styled.section`\n  width: 100vw;\n  height: 100vh;\n  background-color: ${colorOrange};\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Div = styled.div`\n  color: ${colorWhite};\n  width: 15em;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst H1 = styled.h1`\ntext-align: center;\n`;\n\nconst Form = styled.form`\n  display: flex;\n  flex-direction: column;\n\n  & > * {\n    display: block;\n  }\n\n  & > * {\n    margin-bottom: 0.5em;\n  }\n\n  & > input:last-of-type {\n    margin-bottom: 1.5em;\n  }\n\n  & > *:last-child {\n    margin: 0;\n  }\n`;\n\nconst Input = styled.input`\n  padding: 1em;\n  border: none;\n  background-color: white;\n  border-radius: 5em;\n  text-align: center;\n\n  &:placeholder {\n      text-align: center;\n  }\n`;\n\nconst ButtonPrimary = styled.button`\n  padding: 1em;\n  border: none;\n  border-radius: 5em;\n  text-align: center;\n  cursor: pointer;\n  background-color: ${colorBrown};\n  color: ${colorWhite};\n  font-size: 0.8em;\n`;\n\nconst ButtonSecondary = styled(NavLink)`\n  padding: 1em;\n  border: none;\n  border-radius: 5em;\n  text-align: center;\n  cursor: pointer;\n  background-color: ${colorYellow};\n  font-size: 0.8em;\n  text-decoration: none;\n  color: black;\n`;\n\nconst LOGIN_MUTATION = gql`\n  mutation LoginMutation(\n    $username: String!\n    $password: String!\n  ) {\n    login(\n      username: $username\n      password: $password\n    ) {\n      token\n      user {\n        username\n      }\n    }\n  }\n`;\n\nfunction LoginScreen() {\n\n  const history = useHistory();\n\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const [login] = useMutation(LOGIN_MUTATION, {\n    variables: {\n      username: username,\n      password: password,\n    },\n    onCompleted: ({ login }) => {\n      localStorage.setItem(AUTH_TOKEN, login.token);\n      history.push('/chat');\n    }\n  });\n\n  const isValid = (username, password) => {\n    if (!username || !password) {\n      return false;\n    }\n\n    if (username.trim() === \"\") {\n      return false;\n    }\n\n    if (password.trim() === \"\") {\n      return false;\n    }\n\n    return true;\n  }\n\n  const submit = (e) => {\n    e.preventDefault();\n    login();\n  }\n\n  return (\n    <Section>\n      <Div>\n        <H1>Chat Application</H1>\n        <Form>\n            <Input type=\"text\" placeholder=\"Username\" value={username} onChange={e => setUsername(e.target.value)}/>\n            <Input type=\"password\" placeholder=\"Password\" value={password} onChange={e => setPassword(e.target.value)}/>\n            <ButtonPrimary type=\"submit\" onClick={submit} disabled={!isValid(username, password)}>\n              Login\n            </ButtonPrimary>\n            <ButtonSecondary to=\"/signup\">\n              Signup\n            </ButtonSecondary>\n        </Form>\n      </Div>\n    </Section>\n  );\n}\n\nexport default LoginScreen;\n","import styled from 'styled-components';\nimport { NavLink, useHistory } from 'react-router-dom';\nimport React, { useState } from 'react';\nimport { useMutation, gql } from '@apollo/client';\nimport { AUTH_TOKEN } from '../constants';\n\nconst colorYellow = \"#FFE24F\";\nconst colorBrown = \"#9A4D31\";\nconst colorOrange = \"#FFA341\";\nconst colorWhite = \"#FFFFFF\";\n\nconst Section = styled.section`\n  width: 100vw;\n  height: 100vh;\n  background-color: ${colorOrange};\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Div = styled.div`\n  color: ${colorWhite};\n  width: 15em;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst H1 = styled.h1`\n  text-align: center;\n`;\n\nconst Form = styled.form`\n  display: flex;\n  flex-direction: column;\n\n  & > * {\n    display: block;\n  }\n\n  & > * {\n    margin-bottom: 0.5em;\n  }\n\n  & > input:last-of-type {\n    margin-bottom: 1.5em;\n  }\n\n  & > *:last-child {\n    margin: 0;\n  }\n`;\n\nconst Input = styled.input`\n  padding: 1em;\n  border: none;\n  background-color: white;\n  border-radius: 5em;\n  text-align: center;\n\n  &:placeholder {\n      text-align: center;\n  }\n`;\n\nconst ButtonPrimary = styled.button`\n  padding: 1em;\n  border: none;\n  border-radius: 5em;\n  text-align: center;\n  cursor: pointer;\n  background-color: ${colorBrown};\n  color: ${colorWhite};\n  font-size: 0.8em;\n\n  &:disabled,\n  &[disabled]{\n    opacity: 0.6;\n  }\n`;\n\nconst ButtonSecondary = styled(NavLink)`\n  padding: 1em;\n  border: none;\n  border-radius: 5em;\n  text-align: center;\n  cursor: pointer;\n  background-color: ${colorYellow};\n  font-size: 0.8em;\n  text-decoration: none;\n  color: black;\n`;\n\nconst SIGNUP_MUTATION = gql`\n  mutation SignupMutation(\n    $username: String!\n    $password: String!\n  ) {\n    signup(\n      username: $username\n      password: $password\n    ) {\n      token\n      user {\n        username\n      }\n    }\n  }\n`;\n\nfunction SignupScreen(props) {\n  const history = useHistory();\n\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [password2, setPassword2] = useState(\"\");\n\n  const [signup] = useMutation(SIGNUP_MUTATION, {\n    variables: {\n      username: username,\n      password: password,\n    },\n    onCompleted: ({ signup }) => {\n      localStorage.setItem(AUTH_TOKEN, signup.token);\n      history.push('/chat');\n    }\n  });\n\n  const isValid = (username, password, password2) => {\n    if (!username || !password || !password2) {\n      return false;\n    }\n\n    if (username.trim() === \"\") {\n      return false;\n    }\n\n    if (password.trim() === \"\") {\n      return false;\n    }\n\n    if (password2.trim() === \"\") {\n      return false;\n    }\n\n    if (password.value !== password2.value) {\n      return false;\n    }\n\n    return true;\n  }\n\n  const submit = (e) => {\n    e.preventDefault();\n    signup();\n  }\n\n  return (\n    <Section>\n      <Div>\n        <H1>Chat Application</H1>\n        <Form>\n            <Input type=\"text\" placeholder=\"Username\" value={username} onChange={e => setUsername(e.target.value)}/>\n            <Input type=\"password\" placeholder=\"Password\" value={password} onChange={e => setPassword(e.target.value)}/>\n            <Input type=\"password\" placeholder=\"Password Confirm\" value={password2} onChange={e => setPassword2(e.target.value)}/>\n            <ButtonPrimary type=\"submit\" onClick={submit} disabled={!isValid(username, password, password2)}>\n              Signup\n            </ButtonPrimary>\n            <ButtonSecondary to=\"/\">\n              Back\n            </ButtonSecondary>\n        </Form>\n      </Div>\n    </Section>\n  );\n}\n\nexport default SignupScreen;\n","import './App.css';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport ChatScreen from './screens/ChatScreen';\nimport LoginScreen from './screens/LoginScreen';\nimport SignupScreen from './screens/SignupScreen';\n\nfunction App() {\n  return (\n    <HashRouter>\n        <main className=\"App\">\n          <Switch>\n              <Route path=\"/chat\" component={ChatScreen}/>\n              <Route exact path=\"/signup\" component={SignupScreen}/>\n              <Route exact path=\"/\" component={LoginScreen}/>\n          </Switch>\n        </main>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport {\n  ApolloProvider,\n  ApolloClient,\n  createHttpLink,\n  InMemoryCache\n} from '@apollo/client';\n\nconst httpLink = createHttpLink({\n  uri: 'http://localhost:4000'\n});\n\nconst client = new ApolloClient({\n  link: httpLink,\n  cache: new InMemoryCache()\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}